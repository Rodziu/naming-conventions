{"version":3,"sources":["webpack://NamingConventions/webpack/universalModuleDefinition","webpack://NamingConventions/webpack/bootstrap","webpack://NamingConventions/webpack/runtime/define property getters","webpack://NamingConventions/webpack/runtime/hasOwnProperty shorthand","webpack://NamingConventions/webpack/runtime/make namespace object","webpack://NamingConventions/./src/naming-conventions.ts"],"names":[],"mappings":"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","file":"naming-conventions.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"NamingConventions\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"NamingConventions\"] = factory();\n\telse\n\t\troot[\"NamingConventions\"] = factory();\n})(window, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * JavaScript naming conventions conversion\n * (c) 2020-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nconst TYPE_NUMBER = 1, TYPE_LOWERCASE = 2, TYPE_UPPERCASE = 3, TYPE_SPECIAL = 4;\n\nexport interface NamingConventionProcessor {\n    from: (input: string) => { parsedInput: string, regex: RegExp },\n    to: (letter: string) => string,\n    postProcess?: (result: string) => string\n}\n\nconst conventions: {[convention: string]: NamingConventionProcessor} = {\n    camelCase: {\n        from(input) {\n            return {\n                parsedInput: input,\n                regex: /[A-Z]/g\n            }\n\n        },\n        to(letter) {\n            return letter.toUpperCase();\n        }\n    },\n    pascalCase: {\n        from(input) {\n            const parsedInput = input[0].toLowerCase() + input.substring(1);\n            return {\n                parsedInput,\n                regex: /[A-Z]/g\n            }\n\n        },\n        to(letter) {\n            return letter.toUpperCase();\n        },\n        postProcess(result) {\n            return result[0].toUpperCase() + result.substring(1);\n        }\n    },\n    snakeCase: {\n        from(input) {\n            return {\n                parsedInput: input,\n                regex: /_[a-z]/g\n            }\n        },\n        to(letter) {\n            return `_${letter.toLowerCase()}`;\n        }\n    },\n    kebabCase: {\n        from(input) {\n            return {\n                parsedInput: input,\n                regex: /-[a-z]/g\n            }\n        },\n        to(letter) {\n            return `-${letter.toLowerCase()}`;\n        }\n    }\n};\n\nexport type NamingConvention = keyof typeof conventions;\n\nexport const NamingConventions = {\n    camelCase: 'camelCase',\n    pascalCase: 'pascalCase',\n    snakeCase: 'snakeCase',\n    kebabCase: 'kebabCase',\n    convert(input: string) {\n        return {\n            /**\n             * Prepare provided input to be converted from given convention\n             */\n            from(convention: NamingConvention): { to: (targetConvention: NamingConvention) => string } {\n                const {parsedInput, regex} = _getConvention(convention).from(input);\n                return {\n                    to(targetConvention: NamingConvention): string {\n                        return _replace(parsedInput, regex, targetConvention);\n                    }\n                }\n            },\n            /**\n             * Parse provided input and convert it to desired convention\n             */\n            to(targetConvention: NamingConvention): string {\n                const len = input.length,\n                    parsed = [];\n                let prevType = 0,\n                    stack = '';\n\n                for (let i = 0; i < len; i++) {\n                    const type = _getType(input[i]);\n\n                    if (i > 0 && !_compareTypes(prevType, type, stack) && stack.length) {\n                        parsed.push(stack);\n                        stack = '';\n                    }\n\n                    if (i === 0 || type !== TYPE_SPECIAL) {\n                        stack += input[i].toLowerCase();\n                    }\n\n                    prevType = type;\n                }\n\n                if (stack.length) {\n                    parsed.push(stack);\n                }\n\n                return _replace(parsed.join('-'), /-[a-z]/g, targetConvention);\n            }\n        }\n    },\n    /**\n     * @param {string} conventionName\n     * @param {NamingConventionProcessor} processor\n     */\n    addConvention(conventionName: string, processor: NamingConventionProcessor): void {\n        conventions[conventionName] = processor;\n        NamingConventions[conventionName] = conventionName;\n    }\n};\n\nexport default NamingConventions;\n\nfunction _getConvention(convention: NamingConvention): NamingConventionProcessor {\n    if (typeof conventions[convention] !== 'undefined') {\n        return conventions[convention];\n    }\n    throw new Error(`Unknown naming convention '${convention}'!`)\n}\n\nfunction _replace(parsedInput: string, regex: RegExp, targetConvention: NamingConvention): string {\n    const result = parsedInput.replace(regex, (match) => {\n        return _getConvention(targetConvention).to(match.substring(match.length - 1));\n    });\n    if (result.length && typeof _getConvention(targetConvention).postProcess === 'function') {\n        return _getConvention(targetConvention).postProcess(result);\n    }\n    return result;\n}\n\nfunction _getType(char: string): number {\n    if (!isNaN(parseInt(char, 10))) {\n        return TYPE_NUMBER;\n    } else if (char === char.toLowerCase() && char !== char.toUpperCase()) {\n        return TYPE_LOWERCASE;\n    } else if (char === char.toUpperCase() && char !== char.toLowerCase()) {\n        return TYPE_UPPERCASE;\n    }\n    return TYPE_SPECIAL;\n}\n\nfunction _compareTypes(prevType: number, type: number, stack: string): boolean {\n    if (type === prevType) {\n        return true;\n    } else if (type === TYPE_NUMBER) {\n        return prevType !== TYPE_SPECIAL;\n    } else if (type === TYPE_LOWERCASE && prevType === TYPE_UPPERCASE) {\n        return stack.length === 1; // for camelCase\n    }\n    return false;\n}\n"],"sourceRoot":""}