const NamingConventions=function(e,t,o,s){"use strict";const n={camelCase:{from:e=>({parsedInput:e,regex:/[A-Z]/g}),to:e=>e.toUpperCase()},pascalCase:{from:e=>({parsedInput:e[0].toLowerCase()+e.substring(1),regex:/[A-Z]/g}),to:e=>e.toUpperCase(),postProcess:e=>e[0].toUpperCase()+e.substring(1)},snakeCase:{from:e=>({parsedInput:e,regex:/_[a-z]/g}),to:e=>`_${e.toLowerCase()}`},kebabCase:{from:e=>({parsedInput:e,regex:/-[a-z]/g}),to:e=>`-${e.toLowerCase()}`}},r={camelCase:"camelCase",pascalCase:"pascalCase",snakeCase:"snakeCase",kebabCase:"kebabCase",convert:e=>({from(t){const{parsedInput:o,regex:s}=a(t).from(e);return{to:e=>p(o,s,e)}},to(t){const o=e.length,n=[];let r=0,a="";for(let t=0;t<o;t++){const o=c(e[t]);t>0&&!C(r,o,a)&&a.length&&(n.push(a),a=""),0!==t&&o===s||(a+=e[t].toLowerCase()),r=o}return a.length&&n.push(a),p(n.join("-"),/-[a-z]/g,t)}}),addConvention(e,t){n[e]=t,r[e]=e}};return r;function a(e){if(void 0!==n[e])return n[e];throw new Error(`Unknown naming convention '${e}'!`)}function p(e,t,o){const s=e.replace(t,e=>a(o).to(e.substring(e.length-1)));return s.length&&"function"==typeof a(o).postProcess?a(o).postProcess(s):s}function c(n){return isNaN(parseInt(n,10))?n===n.toLowerCase()&&n!==n.toUpperCase()?t:n===n.toUpperCase()&&n!==n.toLowerCase()?o:s:e}function C(n,r,a){return r===n||(r===e?n!==s:r===t&&n===o&&1===a.length)}}(1,2,3,4);
//# sourceMappingURL=naming-conventions.min.js.map
